#+TITLE: Generic Emacs Configuration
#+AUTHOR: Jenowin Jebadoss.A
#+STARTUP: overview

* Startup Performance
#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Make gc pauses faster by decreasing the threshold.
;;(setq gc-cons-threshold (* 2 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

* Interface Tweaks
#+begin_src emacs-lisp
;;set relative numbers
;;(setq display-line-numbers-type 'relative)
;;(add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode 1)  ))
;; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1) (hl-line-mode) )))

;; relative number on normal mode and absolute number for insert mode--------------------------------------
;; (add-hook 'prog-mode-hook ' (lambda ()
;;
;; (add-hook 'evil-insert-state-entry-hook (lambda () (display-line-numbers-mode -1) (setq display-line-numbers-type 'absolute) (display-line-numbers-mode 1) ))
;; (add-hook 'evil-normal-state-entry-hook (lambda () (display-line-numbers-mode -1) (setq display-line-numbers-type 'relative) (display-line-numbers-mode 1) ))
;;
;; ))
;;---------------------------------------------------------------------------------------------------------

;; hilight current line
;;(global-hl-line-mode 1)

;;Emacs can display long lines by truncation
;;(toggle-truncate-lines 1)

;; word wrap Current Line
;;(toggle-word-wrap 1) ;; with fringe indicators
;;(visual-line-mode 1) ;; without fringe indicators
;;(setq-default word-wrap t) ;; enable globally(but not works in org mode)
;;(setq-default truncate-lines t) ;; enable globally(but not works in org mode)
;;(setq truncate-partial-width-windows nil) ;; to make truncate-lines works in horizontal split screen
;;(setq auto-hscroll-mode 'current-line) ;; horizontal auto scroll

;;turn on Hightlighting - matching - Parantheseis by default
(show-paren-mode 1)

;;creating pair brackets by auto
(electric-pair-mode 1)

;;shows battery level(%)
;;(display-battery-mode 1)

;;shows size indication
;;(size-indication-mode 1)

;;shows line
;;(line-number-mode 1)

;;shows line+coloumn
(column-number-mode 1)

;;shows time
;;(display-time-mode 1)

;;By default in Emacs, we don't have ability to select text, and then start typing and our new text replaces the selection.  Let's fix that!
(delete-selection-mode t)

;; auto refresh or revert all buffers when changed from outside.
(global-auto-revert-mode t)

;; auto Refresh or Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)

;;for smooth scrolling----------------------------------------
;;(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping

;; Improve scrolling.
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
;;(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
;;(setq scroll-step 1) ;; keyboard scroll one line at a time

;; Horizontal scrolling mouse events (left/right)
(global-set-key (kbd "<S-mouse-4>") (lambda () (interactive) (if truncate-lines (scroll-right 1))))
(global-set-key (kbd "<S-mouse-5>") (lambda () (interactive) (if truncate-lines (scroll-left 1))))

;;trim trailing white space on save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; change all prompts to y or n instead of yes or no
;;(fset 'yes-or-no-p 'y-or-n-p)
; for Emacs28, replaces the defalias below
(setq use-short-answers t)
;; (defalias 'yes-or-no-p 'y-or-n-p)

;;only cycle through buffers with associated files.
(set-frame-parameter (selected-frame) 'buffer-predicate #'buffer-file-name)

;;Don't show initial Emacs-logo and info
(setq inhibit-splash-screen t)

;; Don't show *Buffer list* when opening multiple files at the same time(while opening file directly from terminal).
(setq inhibit-startup-buffer-menu t)

;; Show only one active window when opening multiple files at the same time(while opening file directly from terminal).
(add-hook 'window-setup-hook 'delete-other-windows)

;; Default Coding System
(set-default-coding-systems 'utf-8)

;; Delete files to trash
(setq-default  delete-by-moving-to-trash t)

;; Add a margin when scrolling vertically
(setq-default  scroll-margin 4)

;;Use spaces instead of tabs for indentation
(setq-default indent-tabs-mode nil)

;; set indentation for js mode(changing the default indentation)
(setq js-indent-level 2)

(setq css-indent-offset 2)

;;set bookmark file location
(setq bookmark-default-file "~/.emacs.d/bookmarks.txt")

;;auto save bookmarks file when modified
(setq bookmark-save-flag 1)

;;To completely turn off sounds in emacs-----
(setq ring-bell-function 'ignore)

;;prevent backup files
(setq make-backup-files nil)

;; set default Line spacing
(setq-default line-spacing 0)

;; Line cursor and no blink
(set-default 'cursor-type  '(bar . 1))
(blink-cursor-mode 0)

;; No Tooltips
(tooltip-mode 0)

;; No fringe but nice glyphs for truncated and wrapped lines
(fringe-mode '(0 . 0))
(defface fallback '((t :family "Fira Code Light"
                       :inherit 'face-faded)) "Fallback")

;; when trucate-line is enabled
(set-display-table-slot standard-display-table 'truncation
                        (make-glyph-code ?… 'fallback))

;; when truncate-line and word-wrap is disabled or (default)
(set-display-table-slot standard-display-table 'wrap
                        (make-glyph-code ?↩ 'fallback))
;; org-mode headings(outlines)
(set-display-table-slot standard-display-table 'selective-display
                        (string-to-vector " …"))


;; hilight region
(set-face-attribute 'region nil :background "#f0f0f0")
#+end_src

* editor tweaks
#+begin_src emacs-lisp

(setq default-frame-alist
      (append (list ;;'(width  . 72) '(height . 40)
                    '(internal-border-width . 12)
                    ;;'(vertical-scroll-bars . nil)
                    ;;'(font . "Roboto Mono Light 14")
                    )))

;;Display buffer name in frame titles
;;(setq frame-title-format '("" invocation-name ": " (:eval (replace-regexp-in-string "^ +" "" (buffer-name)))))
(setq frame-title-format '("Editor MACroS" ": " (:eval (replace-regexp-in-string "^ +" "" (buffer-name)))))

;;increse-decrese global font size using wheels`-------------------------
(defun font-big ()
  (interactive)
  (set-face-attribute 'default nil :height
                      (+ (face-attribute 'default :height) 10)))

(defun font-small ()
  (interactive)
  (set-face-attribute 'default nil :height
                      (- (face-attribute 'default :height) 10)))

(global-set-key (kbd "<C-wheel-down>") 'font-small)
(global-set-key (kbd "<C-wheel-up>") 'font-big)


;;move single line up and down(Alt + up or down)------------------------------------------------
(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key [M-up]  'move-line-up)
(global-set-key [M-down]  'move-line-down)


;; Emacs mode for hiding the mode-line
(defvar-local hidden-mode-line-mode nil)

(define-minor-mode hidden-mode-line-mode
  "Minor mode to hide the mode-line in the current buffer."
  :init-value nil
  :global t
  :variable hidden-mode-line-mode
  :group 'editing-basics
  (if hidden-mode-line-mode
      (setq hide-mode-line mode-line-format
            mode-line-format nil)
    (setq mode-line-format hide-mode-line
          hide-mode-line nil))
  (force-mode-line-update)
  ;; Apparently force-mode-line-update is not always enough to
  ;; redisplay the mode-line
  (redraw-display)
  (when (and (called-interactively-p 'interactive)
             hidden-mode-line-mode)
    (run-with-idle-timer
     0 nil 'message
     (concat "Hidden Mode Line Mode enabled.  "
             "Use M-x hidden-mode-line-mode to make the mode-line appear."))))


;; recentf (Built-in)
;;--------------------------------------------------------------------------
(require 'recentf)

;; get rid of `find-file-read-only' and replace it with something
;; more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)
;;(nvmap :prefix "SPC" "f r"   '( ido-recentf-open :which-key "Find recent file"))

;; enable recent files mode.
(recentf-mode t)

;; 5 files ought to be enough.
(setq recentf-max-saved-items 5)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))
;;----------------------------------------------------------------------------

(defun toggle-top-menu ()
  "Run toggle-menu-bar-mode-from-frame and toggle-tool-bar-mode-from-frame"
  (interactive)
  (menu-bar-mode (if tool-bar-mode -1 1))
  (tool-bar-mode (if tool-bar-mode -1 1)))
(global-set-key (kbd "<f2>") 'toggle-top-menu)

;; increase/decrease Opacity of the GUI
(setq opaque_level 100)
(defun add_one (value)
  (catch 'except
    (interactive)
    (cond ((eql value 1 )
	   (cond ((eql opaque_level 0)
		  (message "Reached the least opacity level!")
		  (throw 'except nil)
		  ) )
	   (setq opaque_level (1- opaque_level))
	   (message "opacity level: %d" opaque_level)
	   (set-frame-parameter (selected-frame) 'alpha opaque_level) )
	  ((eql value -1)
	   (cond ((eql opaque_level 100)
		  (message "Reached the max opacity level!")
		  (throw 'except nil)
		  ) )
	   (setq opaque_level (1+ opaque_level))
	   (message "opacity level: %d" opaque_level)
	   (set-frame-parameter (selected-frame) 'alpha opaque_level) ) )
    )
  )

(global-set-key (kbd "C-S-<mouse-4>") (lambda () (interactive) (add_one -1)) )
(global-set-key (kbd "C-S-<mouse-5>")  (lambda () (interactive) (add_one 1)) )

(defun jj/word-wrap-on ()
  (let ((inhibit-message t) ;; hide message from minibuffer
        (message-log-max nil));; hide from *message*
    (toggle-truncate-lines -1)
    (toggle-word-wrap 1)
    )
  (message "jj/word-wrap enabled"))
(defun jj/word-wrap-off ()
  (let ((inhibit-message t) ;; hide message from minibuffer
        (message-log-max nil));; hide from *message*
    (toggle-truncate-lines 1)
    (toggle-word-wrap -1)
    )
  (message "jj/word-wrap disabled"))

(global-set-key (kbd "C-c w") (lambda ()
                                (interactive)
                                (if (and word-wrap (not truncate-lines))
                                    (jj/word-wrap-off)
                                  (jj/word-wrap-on)
                                  )))

;; Start the Emacs server from this instance so that all emacsclient calls are routed here
(server-start)

#+end_src

* Fonts
** default font
#+begin_src emacs-lisp
;; set default font
;; Set the default font face based on platform
(pcase system-type
  ((or 'gnu/linux 'windows-nt 'cygwin)
   (set-face-attribute 'default nil
                       :family "JetBrains Mono"
                       :height 180
                       :weight 'Regular))
  ('darwin (set-face-attribute 'default nil :font "Fira Mono" :height 170)))

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil
                    :family "Monospace"
                    :weight 'Regular)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil
                    :family "Source Code Pro"
                    :weight 'Regular)

#+end_src

** org fonts

+ Tip: you can use C-u C-x = (which runs the command what-cursor-position with a prefix argument) to show information about the character under the cursor, including the face which is being used for it. If you find a markup element which is not correctly configured, you can use this to know which face you have to customize.

#+begin_src emacs-lisp
;;Finally, we set up a nice proportional font, in different sizes, for the headlines. The fonts listed will be tried in sequence, and the first one found will be used. My current favorite is ET Book, feel free to add your own:

(defun my/org-mode-fonts ()
  (interactive)
  ;; My own font face (similar to build in faces like default, fixed-pitch, variable-pitch)
  (defface variable-tuple
    '((t :foreground "#3C3C3C"
         :background "#F0F0F0"
         :overline "#A7A7A7"
         :family "Liberation Sans"
         :weight bold
         ;;:underline t
         ))
    "Face for function parameters."
    :group 'my-lang-mode )
  (setq-local face-remapping-alist '((org-level-1 (:height 1.2) variable-tuple)
                                     (org-level-2 (:height 1.1) variable-tuple)
                                     (org-level-3 (:height 1.05) variable-tuple)
                                     (org-level-4 (:height 1.0) variable-tuple)
                                     (org-level-5 (:height 1.1) variable-tuple)
                                     (org-level-6 (:height 1.1) variable-tuple)
                                     (org-level-7 (:height 1.1) variable-tuple)
                                     (org-level-8 (:height 1.1) variable-tuple)
                                     (org-document-title (:height 1.5 :underline nil) variable-tuple)


                                     (org-block-begin-line
                                      (:underline "#A7A6AA" :foreground "grey31" :background "#EAEAFF" :extend t))
                                     (org-block fixed-pitch)
                                     (org-code (:background "green") fixed-pitch)
                                     (org-document-info (:foreground "dark orange"))
                                     (org-document-info-keyword  fixed-pitch)
                                     (org-indent  (org-hide fixed-pitch))
                                     (org-link (:foreground "royal blue" :underline t))
                                     (org-meta-line (font-lock-comment-face fixed-pitch))
                                     (org-property-value  fixed-pitch)
                                     (org-special-keyword (font-lock-comment-face fixed-pitch))
                                     (org-table (:foreground "#83a598") fixed-pitch)
                                     (org-tag (:weight bold :height 0.8) (shadow fixed-pitch))
                                     (org-verbatim (shadow fixed-pitch))
                                     )))


(defun my/org-mode-fonts-quit()
  (interactive)
  (setq-local face-remapping-alist '((default variable-pitch default)))
  )
#+end_src

** org tweaks
#+begin_src emacs-lisp
;; First, we ask org-mode to hide the emphasis markup (e.g. /.../ for italics, *...* for bold, etc.):
(setq org-hide-emphasis-markers t)

;;(setq org-ellipsis "⤵")
;;(setq org-ellipsis "↴")

;;Then, we set up a font-lock substitution for list markers (I always use “-” for lists, but you can change this if you want) by replacing them with a centered-dot character:
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
;;(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "➤"))))))


;; disable <> auto pairing in electric-pair-mode for org-mode
(add-hook 'org-mode-hook (lambda ()
                           (setq-local electric-pair-inhibit-predicate
                                       `(lambda (c)
                                          (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

;;To make more horizontal space, the headlines are shifted by two characters. Configure org-indent-indentation-per-level variable for a different number(org-indent-mode)).
(add-hook 'org-mode-hook (lambda()
                           (org-indent-mode)
                           (variable-pitch-mode 1) ;; uses variable pitch fonts excluding headers and src blocks and affect font size for all fonts.
                           ))

;; Override modes in org mode.
(dolist (mode '(org-mode-hook))
  (add-hook mode (lambda ()
                   (display-line-numbers-mode -1)
                   (hl-line-mode -1)
                   )))

;;displays the contents of code blocks in Org-mode files using the major-mode of the code.
(setq org-src-fontify-natively t)

;;changes the behavior of TAB to as if it were used in the appropriate major mode.
(setq org-src-tab-acts-natively t)

(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0
      )

(setq org-image-actual-width nil)

(setq org-support-shift-select t)

#+end_src

* keybindings
#+begin_src emacs-lisp

;; ESC to act as quit(only for interactive situations not for combinatino of key sequence)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

* jeno's key
#+begin_src emacs-lisp
(define-minor-mode jeno-key-mode
  "This is jenowin's key bindings!"
  :lighter " Jeno_Keys"
  :keymap (let ((map (make-sparse-keymap)))

            ;;spliting windows
            (define-key map (kbd "C-1") #'delete-other-windows)
            (define-key map (kbd "C-2") #'split-window-below)
            (define-key map (kbd "C-3") #'split-window-right)
            (define-key map (kbd "C-0") #'delete-window)

            ;;moving cursors - conflict with emmet auto completion C-j.
            ;;(define-key map (kbd "C-h") #'windmove-left)  ; move to left window
            ;;(define-key map (kbd "C-l") #'windmove-right) ; move to right window
            ;;(define-key map (kbd "C-k") #'windmove-up)    ; move to upper window
            ;;(define-key map (kbd "C-j") #'windmove-down)  ; move to lower window

            ;;resizeing windows
            (define-key map (kbd "C-{") #'shrink-window-horizontally)
            (define-key map (kbd "C-}") #'enlarge-window-horizontally)
            (define-key map (kbd "C-|") 'enlarge-window)

            ;;switching buffers
            (define-key map (kbd "C-S-P") #'previous-buffer)
            (define-key map (kbd "C-S-N") #'next-buffer)

            ;;fast scroll
            (define-key map (kbd "M-k") (kbd "{"))
            (define-key map (kbd "M-j") (kbd "}"))

            map) )

;; make it available to all buffers if needed.
(define-globalized-minor-mode global-jeno-key-mode jeno-key-mode
  (lambda () (jeno-key-mode 1)) )
;;(add-hook 'x-mode-hook 'jeno-key-mode)

(provide 'jeno-key-mode)
(global-set-key (kbd "C-c j") #'global-jeno-key-mode)

#+end_src

* Language snippets
#+begin_src emacs-lisp
;;initial or required templates
(add-hook 'c++-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c 0")  (lambda() (interactive) (insert-file "~/.vim/snippets/c++/default.cpp")))
            (local-set-key (kbd "C-c 1")  (lambda() (interactive) (insert-file "~/.vim/snippets/c++/temp1.cpp")))
            (local-set-key (kbd "C-c 2")  (lambda() (interactive) (insert-file "~/.vim/snippets/c++/temp2.cpp")))
            ))

(add-hook 'c-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c 0")  (lambda() (interactive) (insert-file "~/.vim/snippets/c/default.c")))
            (local-set-key (kbd "C-c 1")  (lambda() (interactive) (insert-file "~/.vim/snippets/c/temp1.c")))
            (local-set-key (kbd "C-c 2")  (lambda() (interactive) (insert-file "~/.vim/snippets/c/temp2.c")))
            ))

(add-hook 'python-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c 0")  (lambda() (interactive) (insert-file "~/.vim/snippets/python/default.py")))
            ;;(local-set-key (kbd "C-c 1")  (lambda() (interactive) (insert-file "~/.vim/snippets/c/temp1.py")))
            ;;(local-set-key (kbd "C-c 2")  (lambda() (interactive) (insert-file "~/.vim/snippets/c/temp2.py")))
            ))

(add-hook 'html-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c 0")  (lambda() (interactive) (insert-file "~/.vim/snippets/html/default.html") (progn (next-line 9) (indent-for-tab-command) )))
            (local-set-key (kbd "C-c 1")  (lambda() (interactive) (insert-file "~/.vim/snippets/html/temp1.html") (progn (next-line 10) (indent-for-tab-command)  )))
            (local-set-key (kbd "C-c 2")  (lambda() (interactive) (insert-file "~/.vim/snippets/html/temp2.html") (progn (next-line 11) (indent-for-tab-command)) ))
            ))

(add-hook 'js-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c 0")  (lambda() (interactive) (insert-file "~/.vim/snippets/javascript/temp1.js") (next-line 8) ))
            (local-set-key (kbd "C-c 1")  (lambda() (interactive) (insert-file "~/.vim/snippets/javascript/temp2.js") (progn (next-line 9) (indent-for-tab-command)  )))
            ;;(local-set-key (kbd "C-c 2")  (lambda() (interactive) (insert-file "~/.vim/snippets/html/temp2.html") (progn (next-line 11) (indent-for-tab-command)) ))
            ))

#+end_src
