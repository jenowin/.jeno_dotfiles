#+TITLE: User Emacs Configuration
#+AUTHOR: Jenowin Jebadoss.A
#+STARTUP: overview

* packages
** package.el
#+begin_src emacs-lisp
;; disable because of elpa bug in emacs 27.1 or not sure about latest version
;;(setq package-check-signature nil)

(require 'package)
(setq package-archive-priorities '(("gnu" . 10) ;; from elpa
                                   ("melpa-dev" . 5))
      package-archives '(
                         ("gnu" . "https://elpa.gnu.org/packages/") ;; works only without signature
                         ("melpa-dev" . "https://melpa.org/packages/")
                         ;; ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ))

;;(package-refresh-contents)
(package-initialize)
#+end_src

** use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+end_src

** General
General.el allows us to set keybindings.  As a longtime Doom Emacs user, I have grown accustomed to using SPC as the prefix key.  General makes setting keybindings (especially with SPC) much easier.  All of the keybindings we set later in the config depend on general being loaded.
#+begin_src emacs-lisp
(use-package general
  :ensure t
  :pin melpa-dev
  :config
  (general-evil-setup t))
#+end_src

;; Managing Buffer
#+begin_src emacs-lisp
(nvmap :prefix "SPC"
  "b b"   '(ibuffer :which-key "Ibuffer")
  "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
  "b k"   '(kill-current-buffer :which-key "Kill current buffer")
  "b n"   '(next-buffer :which-key "Next buffer")
  "b p"   '(previous-buffer :which-key "Previous buffer")
  "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
  "b K"   '(kill-buffer :which-key "Kill buffer"))

(nvmap :prefix "SPC"
  "w"   '(save-buffer :which-key "save-buffer")
  "x"   '(kill-current-buffer :which-key "kill-current-buffer")
  "c s"   '(jeno-emacs-build-config :which-key "jeno-emacs-build-config")
  "c l"   '(jeno-emacs-load-config :which-key "jeno-emacs-load-config"))
#+end_src

** WHICH KEY
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(which-key-mode)
#+end_src

** evil packages
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t ;; This is optional since it's already set to t by default.
	  evil-want-keybinding nil
	  evil-vsplit-window-right t
	  evil-split-window-below t
	  evil-want-C-u-scroll t)
    (setq evil-normal-state-message nil
	  evil-insert-state-message nil
	  evil-visual-state-message nil
	  evil-replace-state-message nil)
     (setq evil-mode-line-format nil)

    :config
    (evil-mode 1)
    ;; toggle org headers(0-n) using tab key in normal mode
    (with-eval-after-load 'evil-maps (define-key evil-motion-state-map (kbd "TAB") nil))
    ;;(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (general-evil-setup)
    (general-nmap :prefix "SPC" "m" 'evil-motion-state) ;; default :states
    (general-mmap "m" 'evil-normal-state) ;; motion state (normal, visual, and operator state)

    (defun evil-cursor-shapes(x &optional e m n i v r)
      (interactive (list (completing-read "My prompt: " '("default" "box" "bar"))) )
      (cond
       ((string= x "default")
	(progn (setq e 'box m e n e i 'bar v 'hbar r v) (message "Default!")))
       ((string= x "box")
	(progn (setq e 'box m e n e i e v e r e) (message "Box!") ))
       ((string= x "bar")
	(progn (setq e 'bar m e n e i e v e r e) (message "Bar!") ))
       )
      (setq evil-default-state 'normal ;; (normal, insert, emacs, visual...) when switching to new buffer
	    evil-emacs-state-cursor e  ;; C-z
	    evil-motion-state-cursor m ;; SPC m and m
	    evil-normal-state-cursor n
	    evil-insert-state-cursor i
	    evil-visual-state-cursor v
	    evil-replace-state-cursor r))
    (define-key evil-normal-state-map (kbd "C-c c") (lambda() (interactive) (call-interactively #'evil-cursor-shapes)))
    )


  ;; use evil undo system
  (use-package undo-tree
    :ensure t
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (setq undo-tree-auto-save-history nil) ;; don't save file's undo-tree persistently.
    (global-undo-tree-mode 1))

  ;;  (use-package evil-collection
  ;;  	     :ensure t
  ;;  	     :after evil
  ;;  	     :config
  ;;  	     (setq evil-collection-mode-list '(dashboard dired ibuffer))
  ;;  	     (evil-collection-init))
  ;;  (use-package evil-tutor
  ;;  	     :ensure t
  ;;  	     )

#+end_src

** recentf (Built-in)
#+begin_src emacs-lisp
(require 'recentf)

;; get rid of `find-file-read-only' and replace it with something
;; more useful.
;;(global-set-key (kbd "C-x C-r") 'ido-recentf-open)
(nvmap :prefix "SPC" "f r"   '( ido-recentf-open :which-key "Find recent file"))

;; enable recent files mode.
(recentf-mode t)

;; 5 files ought to be enough.
(setq recentf-max-saved-items 5)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))
#+end_src

** EMOJIS
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

#+begin_src emacs-lisp
(use-package emojify
  :ensure t
  :hook (after-init . global-emojify-mode))
#+end_src

** PROJECTILE
#+begin_src
(use-package projectile
  :ensure t
  :pin melpa-dev ;; use pin name that you have used in package archives above.
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+end_src

** NEOTREE
#+BEGIN_SRC emacs-lisp
;; Function for setting a fixed width for neotree.
;; Defaults to 25 but I make it a bit longer (35) in the 'use-package neotree'.
(defcustom neo-window-width 25
  "*Specifies the width of the NeoTree window."
  :type 'integer
  :group 'neotree)

(use-package neotree
  :ensure t
  :config
  (add-hook 'neotree-mode-hook (lambda () (display-line-numbers-mode -1) ))
  (setq neo-smart-open t
        neo-window-width 23
        neo-modern-sidebar t
        ;;neo-auto-indent-point t
        neo-cwd-line-style 'button
        neo-theme (if (display-graphic-p) 'icons 'arrow)
        ;;neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action)
  ;; truncate long file names in neotree
  (add-hook 'neo-after-create-hook
            #'(lambda (_)
                (with-current-buffer (get-buffer neo-buffer-name)
                  (setq truncate-lines t
                        word-wrap nil
                        mode-line-format nil)

                  ;; no idea what is this
                  ;;(make-local-variable 'auto-hscroll-mode)
                  ;;(setq auto-hscroll-mode nil)
                  ))))

(add-hook 'neotree-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
            (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
            (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
            (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
            (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
            (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
            (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))



;; set scale size in neotree
(defun text-scale-twice ()(interactive)(progn(text-scale-adjust 0)(text-scale-decrease 1)))
(add-hook 'neo-after-create-hook (lambda (_)(call-interactively 'text-scale-twice)))

;; show hidden files
(setq-default neo-show-hidden-files t)

;;auto change directory while changing buffers
;;(setq neo-smart-open t)

;;F8 Key to Toggle
(global-set-key [f8] 'neotree-toggle)
(nvmap :prefix "SPC" "e"   '(neotree-show :which-key "neotree-show"))

(global-set-key [C-f8] 'neotree-dir)
#+end_src

** HELM
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :config

  (helm-mode 1)

  ;; Have toggling delay due to custom size
  ;;(helm-autoresize-mode 1)
  ;;(setq helm-autoresize-max-height 35
  ;;helm-autoresize-min-height 35)

  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
  )

#+end_src

** HELM-ag
#+begin_src emacs-lisp
(use-package helm-ag ;; the_silver_searcher must be installed
  :ensure t)
#+end_src

** VIMISH-FOLD
#+begin_src
(use-package vimish-fold
  :config
  (vimish-fold-global-mode 1))

                                        ;(global-set-key (kbd "<menu> v f") #'vimish-fold)
                                        ;(global-set-key (kbd "<menu> v v") #'vimish-fold-delete)

#+end_src

** COMPANY
#+begin_src emacs-lisp
(use-package company
  :ensure t
  ;;:hook ((c-mode c++-mode python-mode) . company-mode)
  :config
  (setq company-idle-delay 0.0
        company-minimum-prefix-length 3
        company-selection-wrap-around t
        company-show-numbers t
        company-require-match 'never
        company-dabbrev-downcase nil
        company-dabbrev-ignore-case t
        company-backends '(company-jedi company-nxml
                                        company-css company-capf
                                        (company-dabbrev-code company-keywords)
                                        company-files company-dabbrev)
        company-jedi-python-bin "python")
  :bind (:map company-active-map
              ;;("<tab>" . company-indent-or-complete-common) ;; not woking
              ("C-n" . company-select-next-or-abort)
              ("C-p" . company-select-previous-or-abort))

  ;;(global-company-mode t)
  )

;;A company front-end with icons.
(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))

;;company-lsp
;; (use-package company-lsp
;;   :ensure t
;;   :config
;;   (push 'company-lsp company-backends)
;;   )
#+end_src

** LSP
#+begin_src emacs-lisp
;;minimal lsp setup
(use-package lsp-mode
  :ensure t
  :commands lsp
  ;;:hook ((c-mode c++-mode python-mode) . lsp-deferred)
  ;;:hook ((c-mode c++-mode python-mode) . lsp)
  :custom
  (lsp-prefer-capf t)
  (lsp-auto-guess-root t) ;; should auto guess the dir for using LSP.
  (lsp-prefer-flymake nil) ;; Use flycheck instead of flymake(if On).
  (lsp-keep-workspace-alive nil)
  :config
  ;;stop lsp-mode including headers automatically
  (setq lsp-clients-clangd-args  '("--header-insertion=never"))
  ;;stop lsp from affecting the default indentaion behaviour.
  (setq lsp-enable-indentation nil)
  ;; :bind
  ;; (:map lsp-mode-map
  ;;       ;;("<tab>" . company-indent-or-complete-common)) ;; not woking
  )


;; optionally
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-show-with-cursor t  ;;document show at cursor hover
        lsp-ui-doc-show-with-mouse nil  ;;document show at mouse hover
        lsp-lens-enable nil
        lsp-ui-sideline-enable nil
        lsp-modeline-code-actions-enable nil)
  )

#+end_src

** FLYCHECK
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  ;;:hook ((c-mode c++-mode) . flycheck-mode)
  :config
  (setq flycheck-g++-language-standard "c++14")
  )
#+end_src

** virtualenvwrapper (to elborate myself in future)
#+begin_src
(use-package virtualenvwrapper
  :ensure t
  :config
  (venv-initialize-interactive-shells)
  (venv-initialize-eshell))

(setq lsp-python-executable-cmd "python")
(setq venv-location '("~/Desktop/python/calculator/"
                      "~/Desktop/python/calculator_pyqt5"))
#+end_src

** ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
#+begin_src emacs-lisp
(use-package all-the-icons :ensure t)
#+end_src

** DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init      ;; tweak dashboard config before loading it
  ;; start automatically at init-hook
  (add-hook 'after-init-hook 'dashboard-refresh-buffer)

  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/EMACS/PROFILES/main-config/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to t/nil for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          ;;(projects . 3)
                          ;;(registers . 3)
                          ) )

  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book"))))

;;This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

** SMEX
Smex is a package the makes M-x remember our history.  Now M-x will show our last used commands first.
#+begin_src
(use-package smex)
(smex-initialize)
#+end_src

** HIGHLIGHT-INDENT-GUIDES
#+begin_src
(use-package highlight-indent-guides
  :ensure t
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method (quote character)) ;;fill, column, character, bitmap.
  )
#+end_src

** CENTAUR-TABS
#+begin_src
(use-package centaur-tabs
  :demand
  :ensure t
  :hook (dashboard-mode . centaur-tabs-local-mode) ;; Disable centaur-tabs in selected buffers useing centaur-tabs-local-mode.
  :config
  (setq centaur-tabs-style "bar"
            centaur-tabs-height 32
            centaur-tabs-set-icons t
            centaur-tabs-plain-icons t
            centaur-tabs-gray-out-icons 'buffer
            centaur-tabs-set-bar 'left ;;left, over, under

            ;;default: (Already described)
            ;;tabs: Cycle through visible tabs (that is, the tabs in the current group)
            ;;groups: Navigate through tab groups only
            centaur-tabs-cycle-scope 'tabs)
            (centaur-tabs-mode t)

  :bind
  (:map evil-normal-state-map
            ("g t" . centaur-tabs-forward)
            ("g T" . centaur-tabs-backward)) )

#+end_src

** RAINBOW-DELIMITERS
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Doom Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

** slime
#+begin_src emacs-lisp
(use-package slime
  :ensure t
  :config
  (setq inferior-lisp-program "sbcl"))
#+end_src

** ielm (built-in)
#+begin_src emacs-lisp
(require 'ielm)
#+end_src

** org bullets
#+begin_src emacs-lisp
;;(use-package org-bullets
;;  :ensure t
;;  :config
;;  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(use-package org-superstar
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

** org tempo
Org-tempo is a package that allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(use-package org-tempo
  :ensure nil) ;; tell use-package not to try to install org-tempo since it's already there.
#+end_src

** Olivetti
#+begin_src emacs-lisp
(use-package olivetti
  :ensure t
  :defer
  :diminish
  :config
  (setq olivetti-body-width 0.65)
  (setq olivetti-minimum-body-width 72)
  (setq olivetti-recall-visual-line-mode-entry-state t))
#+end_src

** emmet mode
#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :config
  ;;If you want the cursor to be positioned between first empty quotes after expanding:
  (setq emmet-move-cursor-between-quotes t) ;; default nil

  (add-hook 'sgml-mode-hook #'emmet-mode) ;; Auto-start on any markup modes
  )
#+end_src

** j2s mode
#+begin_src
(use-package js2-mode
  :ensure t
  :config
  ;;If you want all js files to be open in js2-mode instead of the Emacs built-in js-mode
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  ;;Instead of using js2-mode as a JavaScript major mode, you could keep using the built-in js-mode and use that with js2-minor-mode to enable js2-mode’s syntax checking:
  ;;(add-hook 'js-mode-hook 'js2-minor-mode)
  ;; indentation
  (setq js2-basic-offset 2)
)
#+end_src

** theme looper
#+begin_src emacs-lisp
;;A package for switching themes in Emacs interactively.
(use-package theme-looper
  :ensure t
  :init
  :config
  (theme-looper-set-favorite-themes '(tango-dark wheatgrass broceliande))
  ;;(global-set-key (kbd "C-|") 'theme-looper-select-theme)

  ;;(global-set-key (kbd "C-`") 'theme-looper-select-theme-from-all)

  (global-set-key (kbd "C-`") (lambda ()
                                (interactive)
                                (progn
                                  (theme-looper-select-theme-from-all)
                                  (if (and custom-enabled-themes (string-equal mode-name "Org"))
                                      (my/org-mode-fonts-quit)
                                    (my/org-mode-fonts)
                                    ))
                                ))
  )

#+end_src

* themes
** simple tweak
#+begin_src
;; ;; Set Default Window (Emacs Frame) Size
;;  (if (display-graphic-p)
;;        (setq initial-frame-alist
;;              '(
;;                (tool-bar-lines . 0)
;;                (width . 106) ; chars
;;                (height . 30) ; lines
;;                (background-color . "honeydew")
;;                (left . 50)
;;                (top . 50))) )
;;  (setq default-frame-alist initial-frame-alist)

(setq initial-frame-alist ' ( (background-color . "honeydew")))
#+end_src

** naysayer theme
#+begin_src
(use-package naysayer-theme
  :ensure t
  :init
  :config
  (load-theme 'naysayer t))
#+end_src

** tweaked naysayer theme like jonathan blow
#+begin_src elisp
(add-to-list 'custom-theme-load-path "~/EMACS/SRC/user_packages/naysayer-theme-tweaked.el/")
;;(load-theme 'naysayer t)
#+end_src

** vscode theme
#+begin_src
(use-package vscode-dark-plus-theme
  :ensure t
  :config
  (load-theme 'vscode-dark-plus t))
#+end_src

** Doom theme
#+begin_src emacs-lisp
(use-package doom-themes
  :demand
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** one dark atom
#+begin_src
(use-package atom-one-dark-theme
  :ensure t
  :init
  :config
  (load-theme 'atom-one-dark t))
#+end_src

** modus themes
#+begin_src
(use-package modus-themes
  :ensure t
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-mixed-fonts t
        modus-themes-subtle-line-numbers t
        modus-themes-intense-mouseovers t
        modus-themes-deuteranopia t
        modus-themes-tabs-accented t
        modus-themes-variable-pitch-ui t
        modus-themes-inhibit-reload t ; only applies to `customize-set-variable' and related

        modus-themes-fringes nil ; {nil,'subtle,'intense}

        ;; Options for `modus-themes-lang-checkers' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `straight-underline', `text-also', `background',
        ;; `intense' OR `faint'.
        modus-themes-lang-checkers nil

        ;; Options for `modus-themes-mode-line' are either nil, or a list
        ;; that can combine any of `3d' OR `moody', `borderless',
        ;; `accented', a natural number for extra padding (or a cons cell
        ;; of padding and NATNUM), and a floating point for the height of
        ;; the text relative to the base font size (or a cons cell of
        ;; height and FLOAT)
        ;;modus-themes-mode-line '(accented borderless (padding . 4) (height . 0.9))
        modus-themes-mode-line '(natural borderless (padding . 4) (height . 0.9))

        ;; Same as above:
        ;; modus-themes-mode-line '(accented borderless 4 0.9)

        ;; Options for `modus-themes-markup' are either nil, or a list
        ;; that can combine any of `bold', `italic', `background',
        ;; `intense'.
        modus-themes-markup '(background italic)

        ;; Options for `modus-themes-syntax' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `faint', `yellow-comments', `green-strings', `alt-syntax'
        modus-themes-syntax nil

        ;; Options for `modus-themes-hl-line' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `accented', `underline', `intense'
        ;;modus-themes-hl-line '(underline accented)
        modus-themes-hl-line '(accented)

        ;; Options for `modus-themes-paren-match' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `bold', `intense', `underline'
        modus-themes-paren-match '(bold intense)

        ;; Options for `modus-themes-links' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `neutral-underline' OR `no-underline', `faint' OR `no-color',
        ;; `bold', `italic', `background'
        modus-themes-links '(neutral-underline background)

        ;; Options for `modus-themes-box-buttons' are either nil (the
        ;; default), or a list that can combine any of `flat', `accented',
        ;; `faint', `variable-pitch', `underline', `all-buttons', the
        ;; symbol of any font weight as listed in `modus-themes-weights',
        ;; and a floating point number (e.g. 0.9) for the height of the
        ;; button's text.
        modus-themes-box-buttons '(variable-pitch flat faint 0.9)

        ;; Options for `modus-themes-prompts' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `background', `bold', `gray', `intense', `italic'
        modus-themes-prompts '(intense bold)

        ;; The `modus-themes-completions' is an alist that reads three
        ;; keys: `matches', `selection', `popup'.  Each accepts a nil
        ;; value (or empty list) or a list of properties that can include
        ;; any of the following (for WEIGHT read further below):
        ;;
        ;; `matches' - `background', `intense', `underline', `italic', WEIGHT
        ;; `selection' - `accented', `intense', `underline', `italic', `text-also' WEIGHT
        ;; `popup' - same as `selected'
        ;; `t' - applies to any key not explicitly referenced (check docs)
        ;;
        ;; WEIGHT is a symbol such as `semibold', `light', or anything
        ;; covered in `modus-themes-weights'.  Bold is used in the absence
        ;; of an explicit WEIGHT.
        modus-themes-completions '((matches . (extrabold))
                                   (selection . (semibold accented))
                                   (popup . (accented intense)))

        modus-themes-mail-citations nil ; {nil,'intense,'faint,'monochrome}

        ;; Options for `modus-themes-region' are either nil (the default),
        ;; or a list of properties that may include any of those symbols:
        ;; `no-extend', `bg-only', `accented'
        modus-themes-region '(bg-only no-extend)

        ;; Options for `modus-themes-diffs': nil, 'desaturated, 'bg-only
        modus-themes-diffs 'desaturated

        modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}

        modus-themes-org-agenda ; this is an alist: read the manual or its doc string
        '((header-block . (variable-pitch 1.3))
          (header-date . (grayscale workaholic bold-today 1.1))
          (event . (accented varied))
          (scheduled . uniform)
          (habit . traffic-light))

        modus-themes-headings ; this is an alist: read the manual or its doc string
        '((1 . (overline background variable-pitch 1.3))
          (2 . (rainbow overline 1.1))
          (t . (semibold))))

  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; Load the theme of your choice:
  ;;(modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
  (let ((time (string-to-number (format-time-string "%H"))))
    (if (and (> time 5) (< time 18))
        (modus-themes-load-operandi)
      (modus-themes-load-vivendi)))
  :bind ("<f6>" . modus-themes-toggle)
  )
#+end_src

* My Mode line tweaks
#+begin_src

;; ref https://www.gonsie.com/blorg/modeline.html
;; ref http://doc.endlessparentheses.com/Fun/set-face-attribute.html

;; can't set color using string variable dynammicaly in :box
;; (set-face-attribute 'mode-line nil
;;                     :background "#d0d6ff"
;;                     :foreground "black"
;;                     :box '(:line-width 8 :color "#d0d6ff")
;;                     :family "Calibri Regular"
;;                     :overline nil
;;                     :underline nil)
;;
;; (set-face-attribute 'mode-line-inactive nil
;;                     :background "#efefef"
;;                     :foreground "black"
;;                     :box '(:line-width 8 :color "#efefef")
;;                     :family "Calibri light"
;;                     :overline nil
;;                     :underline nil)


;; now can set colors dynamically in :box using custom set faces and let keyword
(defun my_modeline (&optional act-bg act-fg inact-bg inact-fg)
  (if (or (null act-fg) (null act-bg)) ;; if no arguments passed or if either one not passed return's true
      (setq c1 "#bfbfbf" c2 "#000000" c3 "#e5e5e5" c4 "#333333") ;; default colors
    (setq c1 act-bg c2 act-fg c3 inact-bg c4 inact-fg)  ;; color from arguments
    )
  (let ((active-bg c1)(active-fg c2) (inactive-bg c3) (inactive-fg c4))
    (custom-set-faces
     `(mode-line ((t :box (:line-width 8 :color , active-bg) :background , active-bg :foreground, active-fg :family "Calibri Regular" :overline nil :underline nil)))
     `(mode-line-inactive ((t :box (:line-width 8 :color , inactive-bg) :background , inactive-bg :foreground, inactive-fg :family "Calibri Regular" :overline nil :underline nil)))
     ;;`(mode-line-buffer-id ((t :box (:line-width 8 :color , "purple") :background , "purple" :foreground, "white")))
     )
    )
  )
(my_modeline)                                          ;; emacs default colors
;;(my_modeline "#d7d7d7" "#000000" "#efefef" "#000000")  ;; natural color properties from modus-operandi (light)
;;(my_modeline "#323232" "#ffffff" "#1f1f1f" "#bfc0c4")  ;; natural color properties from modus-vivendi (dark)

;;(my_modeline "#d0d6ff" "#000000" "#efefef" "#000000")  ;; accented color properties from modus-operandi (light)
;;(my_modeline "#2a2a66" "#ffffff" "#1f1f1f" "#bfc0c4")  ;; accented color properties from modus-vivendi (dark)

;;(my_modeline "#d3b58d" "#000000" "#bebebe" "#000000")  ;; naysayer modeline theme

;;(my_modeline "#a4cc44" "black" "#f7f14a" "black")      ;; lime-green and yellow

#+end_src

* syntax support for Languages
** lua
#+begin_src emacs-lisp
(use-package lua-mode
  :ensure t)
#+end_src

** powershell
#+begin_src emacs-lisp
(use-package powershell
  :ensure t)
#+end_src

** csharp
#+begin_src
(use-package csharp-mode
  :ensure t
  :config
  ;;(add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode))
  (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-mode))

  ;;Alternatively, you can add them to your common C mode hook, which runs for all C mode-related modes: C, C++, Objective-C, Java, C#, and more:
  (defun my-csharp-mode-hook ()
    ;; Set indentation level to 2 spaces (instead of 4)
    (setq c-basic-offset 2)
    ;;  Set the extra indentation before a substatement (e.g. the opening brace in the consequent block of an if statement) to 0 (instead of '+)
    ;;(c-set-offset 'substatement-open 0)
    )
  (add-hook 'csharp-mode-hook 'my-csharp-mode-hook)
  )
#+end_src

* xahlee
#+begin_src elisp
(defun xah-cycle-background-color (@n)
  "Cycle background color among a preset list.

If `universal-argument' is called first, cycle n steps. Default is 1 step.

URL `http://xahlee.info/emacs/emacs/elisp_toggle_command.html'
Version 2015-12-17"
  (interactive "p")
  ;; uses a property “state”. Value is a integer.
  (let* (
         ($values ["cornsilk" "seashell" "honeydew"])
         ($index-before
          (if (get 'xah-cycle-background-color 'state)
              (get 'xah-cycle-background-color 'state)
            0))
         ($index-after (% (+ $index-before (length $values) @n) (length $values)))
         ($next-value (aref $values $index-after)))

    (put 'xah-cycle-background-color 'state $index-after)

    (set-background-color $next-value)
    (message "background color changed to %s" $next-value)))
#+end_src
