#+TITLE: Suckless Emacs Configuration
#+AUTHOR: Jenowin Jebadoss.A
#+STARTUP: overview

* packages
** package.el
#+begin_src emacs-lisp
;; disable because of elpa bug in emacs 27.1 or not sure about latest version
(setq package-check-signature nil)

(require 'package)
(setq package-archive-priorities '(("gnu" . 10) ;; from elpa
                                   ("melpa-dev" . 5))
      package-archives '(
                         ("gnu" . "https://elpa.gnu.org/packages/") ;; works only without signature
                         ("melpa-dev" . "https://melpa.org/packages/")
                         ;; ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ))

;; can use pin to choose the package arc sites
;;(use-package company
;;  :ensure t
;;  :pin melpa-stable)

;;(package-refresh-contents)
(package-initialize)
#+end_src

** use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+end_src

** evil packages
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-want-C-u-scroll t)
  (evil-mode))

;;  (use-package evil-collection
;;  	     :ensure t
;;  	     :after evil
;;  	     :config
;;  	     (setq evil-collection-mode-list '(dashboard dired ibuffer))
;;  	     (evil-collection-init))
;;  (use-package evil-tutor
;;  	     :ensure t
;;  	     )

#+end_src

** slime
#+begin_src emacs-lisp
(use-package slime
  :ensure t
  :config
  (setq inferior-lisp-program "sbcl")
  )
#+end_src

** ielm
#+begin_src emacs-lisp
(require 'ielm)
#+end_src

** org bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
#+end_src

** org tempo
Org-tempo is a package that allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(use-package org-tempo
  :ensure nil) ;; tell use-package not to try to install org-tempo since it's already there.

#+end_src

** emmet mode
#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :config
  ;;If you want the cursor to be positioned between first empty quotes after expanding:
  (setq emmet-move-cursor-between-quotes t) ;; default nil

  (add-hook 'sgml-mode-hook #'emmet-mode) ;; Auto-start on any markup modes
)
#+end_src

** j2s mode
#+begin_src emacs-lisp
;;(use-package js2-mode
;;  :ensure t
;;  :config
;;  ;;If you want all js files to be open in js2-mode instead of the Emacs built-in js-mode)
;;  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;;  ;;Instead of using js2-mode as a JavaScript major mode, you could keep using the built-in js-mode and use that with js2-minor-mode to enable js2-mode’s syntax checking:
;;  ;;(add-hook 'js-mode-hook 'js2-minor-mode)
;;)
#+end_src

** theme looper
#+begin_src emacs-lisp
;;A package for switching themes in Emacs interactively.
(use-package theme-looper
 :ensure t
 :init
 :config
(theme-looper-set-favorite-themes '(tango-dark wheatgrass broceliande))
(global-set-key (kbd "C-|") 'theme-looper-select-theme))
#+end_src

* themes
** naysayer theme
#+begin_src emacs-lisp
;;(use-package naysayer-theme
;;  :ensure t
;;  :init
;;  :config
;;  (load-theme 'naysayer t))
#+end_src

** tweaked naysayer theme like jonathan blow
#+begin_src emacs-lisp
;;(add-to-list 'custom-theme-load-path "~/.emacs.d/user_packages/naysayer-theme-tweaked.el/")
;;(load-theme 'naysayer t)
#+end_src

** vscode theme
#+begin_src emacs-lisp
;;(use-package vscode-dark-plus-theme
;;  :ensure t
;;  :config
;;  (load-theme 'vscode-dark-plus t))
#+end_src

** modus themes
#+begin_src emacs-lisp
(use-package modus-themes
  :ensure t
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
 	modus-themes-bold-constructs t
 	modus-themes-mixed-fonts t
 	modus-themes-subtle-line-numbers t
 	modus-themes-intense-mouseovers t
 	modus-themes-deuteranopia t
 	modus-themes-tabs-accented t
 	modus-themes-variable-pitch-ui t ;; changes the font for status line.
 	modus-themes-inhibit-reload t ; only applies to `customize-set-variable' and related

 	modus-themes-fringes nil ; {nil,'subtle,'intense}

 	;; Options for `modus-themes-lang-checkers' are either nil (the
 	;; default), or a list of properties that may include any of those
 	;; symbols: `straight-underline', `text-also', `background',
 	;; `intense' OR `faint'.
 	modus-themes-lang-checkers nil

 	;; Options for `modus-themes-mode-line' are either nil, or a list
 	;; that can combine any of `3d' OR `moody', `borderless',
 	;; `accented', a natural number for extra padding (or a cons cell
 	;; of padding and NATNUM), and a floating point for the height of
 	;; the text relative to the base font size (or a cons cell of
 	;; height and FLOAT)
 	;;modus-themes-mode-line '(accented borderless (padding . 4) (height . 0.9))
 	modus-themes-mode-line '(natural borderless (padding . 4) (height . 0.9))

 	;; Same as above:
 	;; modus-themes-mode-line '(accented borderless 4 0.9)

 	;; Options for `modus-themes-markup' are either nil, or a list
 	;; that can combine any of `bold', `italic', `background',
 	;; `intense'.
 	modus-themes-markup '(background italic)

 	;; Options for `modus-themes-syntax' are either nil (the default),
 	;; or a list of properties that may include any of those symbols:
 	;; `faint', `yellow-comments', `green-strings', `alt-syntax'
 	modus-themes-syntax nil

 	;; Options for `modus-themes-hl-line' are either nil (the default),
 	;; or a list of properties that may include any of those symbols:
 	;; `accented', `underline', `intense'
 	modus-themes-hl-line '(underline accented)

 	;; Options for `modus-themes-paren-match' are either nil (the
 	;; default), or a list of properties that may include any of those
 	;; symbols: `bold', `intense', `underline'
 	modus-themes-paren-match '(bold intense)

 	;; Options for `modus-themes-links' are either nil (the default),
 	;; or a list of properties that may include any of those symbols:
 	;; `neutral-underline' OR `no-underline', `faint' OR `no-color',
 	;; `bold', `italic', `background'
 	modus-themes-links '(neutral-underline background)

 	;; Options for `modus-themes-box-buttons' are either nil (the
 	;; default), or a list that can combine any of `flat', `accented',
 	;; `faint', `variable-pitch', `underline', `all-buttons', the
 	;; symbol of any font weight as listed in `modus-themes-weights',
 	;; and a floating point number (e.g. 0.9) for the height of the
 	;; button's text.
 	modus-themes-box-buttons '(variable-pitch flat faint 0.9)

 	;; Options for `modus-themes-prompts' are either nil (the
 	;; default), or a list of properties that may include any of those
 	;; symbols: `background', `bold', `gray', `intense', `italic'
 	modus-themes-prompts '(intense bold)

	;; The `modus-themes-completions' is an alist that reads three
	;; keys: `matches', `selection', `popup'.  Each accepts a nil
	;; value (or empty list) or a list of properties that can include
	;; any of the following (for WEIGHT read further below):
	;;
	;; `matches' - `background', `intense', `underline', `italic', WEIGHT
	;; `selection' - `accented', `intense', `underline', `italic', `text-also' WEIGHT
	;; `popup' - same as `selected'
	;; `t' - applies to any key not explicitly referenced (check docs)
	;;
	;; WEIGHT is a symbol such as `semibold', `light', or anything
	;; covered in `modus-themes-weights'.  Bold is used in the absence
	;; of an explicit WEIGHT.
	modus-themes-completions '((matches . (extrabold))
                                   (selection . (semibold accented))
                                   (popup . (accented intense)))

	modus-themes-mail-citations nil ; {nil,'intense,'faint,'monochrome}

	;; Options for `modus-themes-region' are either nil (the default),
	;; or a list of properties that may include any of those symbols:
	;; `no-extend', `bg-only', `accented'
	modus-themes-region '(bg-only no-extend)

	;; Options for `modus-themes-diffs': nil, 'desaturated, 'bg-only
	modus-themes-diffs 'desaturated

	modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}

	modus-themes-org-agenda ; this is an alist: read the manual or its doc string
	'((header-block . (variable-pitch 1.3))
          (header-date . (grayscale workaholic bold-today 1.1))
          (event . (accented varied))
          (scheduled . uniform)
          (habit . traffic-light))

	modus-themes-headings ; this is an alist: read the manual or its doc string
	'((1 . (overline background variable-pitch 1.3))
          (2 . (rainbow overline 1.1))
          (t . (semibold))))

  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; Load the theme of your choice:
  ;;(modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
  (let ((time (string-to-number (format-time-string "%H"))))
    (if (and (> time 5) (< time 18))
        (modus-themes-load-operandi)
      (modus-themes-load-vivendi)))
  :bind ("<f6>" . modus-themes-toggle)
  )
(custom-theme-set-faces
 'user
 ;;'(variable-pitch ((t (:family "ETBembo" :height 180 :weight thin))))
 '(variable-pitch ((t (:family "Calibri" :height 180 :weight thin)))) ;; used for statusline by modus-themes.
 '(fixed-pitch ((t ( :family "Iosevka" :height 160))))) ;; used for org-block by modus-themes.

#+end_src

Exclude org mode fonts in modus-themes
#+begin_src emacs-lisp
;; function to check if modus-themes are loaded.
(defun modus_themes_exist ()
  (interactive)
  (catch 'end
    ;;(setq container (substring (format "%s" custom-enabled-themes) 1 -1))
    (setq container custom-enabled-themes)
    (dolist (mytheme container)
      (message "%s" mytheme)
      ;;(sleep-for 1)
      (if (or (string-equal "modus-operandi" mytheme) (string-equal "modus-vivendi" mytheme))
          (throw 'end t)
        ;;(throw 'end nil)
        ;;(progn (print "modus-themes Encountered") (throw 'end nil))
        ;;(print "Not Encountered")
        )
      )
    )
  )
(if (null (modus_themes_exist))
  (my/org-mode-fonts)
  )
#+end_src

* My Mode line tweaks
#+begin_src emacs-lisp

;; ref https://www.gonsie.com/blorg/modeline.html
;; ref http://doc.endlessparentheses.com/Fun/set-face-attribute.html

;; can't set color using string variable dynammicaly in :box
;; (set-face-attribute 'mode-line nil
;;                     :background "#d0d6ff"
;;                     :foreground "black"
;;                     :box '(:line-width 8 :color "#d0d6ff")
;;                     :family "Calibri Regular"
;;                     :overline nil
;;                     :underline nil)
;;
;; (set-face-attribute 'mode-line-inactive nil
;;                     :background "#efefef"
;;                     :foreground "black"
;;                     :box '(:line-width 8 :color "#efefef")
;;                     :family "Calibri light"
;;                     :overline nil
;;                     :underline nil)


;; now can set colors dynamically in :box using custom set faces and let keyword
(defun my_modeline (&optional act-bg act-fg inact-bg inact-fg)
  (if (or (null act-fg) (null act-bg)) ;; if no arguments passed or if either one not passed return's true
      (setq c1 "#bfbfbf" c2 "#000000" c3 "#e5e5e5" c4 "#333333") ;; default colors
    (setq c1 act-bg c2 act-fg c3 inact-bg c4 inact-fg)  ;; color from arguments
    )
  (let ((active-bg c1)(active-fg c2) (inactive-bg c3) (inactive-fg c4))
    (custom-set-faces
     `(mode-line ((t :box (:line-width 8 :color , active-bg) :background , active-bg :foreground, active-fg :family "Calibri Regular" :overline nil :underline nil)))
     `(mode-line-inactive ((t :box (:line-width 8 :color , inactive-bg) :background , inactive-bg :foreground, inactive-fg :family "Calibri Regular" :overline nil :underline nil)))
     `(mode-line-buffer-id ((t :box (:line-width 8 :color , "purple") :background , "purple" :foreground, "white")))
     )
    )
  )
;;(my_modeline)                                          ;; emacs default colors
;;(my_modeline "#d7d7d7" "#000000" "#efefef" "#000000")  ;; natural color properties from modus-operandi (light)
;;(my_modeline "#323232" "#ffffff" "#1f1f1f" "#bfc0c4")  ;; natural color properties from modus-vivendi (dark)

;;(my_modeline "#d0d6ff" "#000000" "#efefef" "#000000")  ;; accented color properties from modus-operandi (light)
;;(my_modeline "#2a2a66" "#ffffff" "#1f1f1f" "#bfc0c4")  ;; accented color properties from modus-vivendi (dark)

;;(my_modeline "#d3b58d" "#000000" "#bebebe" "#000000")  ;; naysayer modeline theme

;;(my_modeline "#a4cc44" "black" "#f7f14a" "black")      ;; lime-green and yellow

#+end_src

* syntax support for Languages
** lua
#+begin_src emacs-lisp
(use-package lua-mode
  :ensure t )
#+end_src

** powershell
#+begin_src emacs-lisp
(use-package powershell
  :ensure t )
#+end_src

* experiment
#+begin_src
toggle fonts for org mode using function , ref: system crafters secret to org presentation videos
toggle to my/org-mode-fonts and defaults, so here we want to replace custom set font setting, so that it can toggled.(refer system crafters)

#+end_src
